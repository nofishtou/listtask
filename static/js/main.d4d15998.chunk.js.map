{"version":3,"sources":["components/Month.js","components/Months.js","App.js","serviceWorker.js","index.js"],"names":["Month","props","useState","isOpen","setIsOpen","options","year","month","day","timeZone","className","onMouseLeave","users","length","onMouseEnter","map","user","index","key","id","firstName","lastName","Date","dob","toLocaleDateString","Months","months","useMemo","weekday","filteredUsers","userData","filter","human","includes","App","usersData","setUsersData","useEffect","fetch","then","response","json","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wOA6CeA,MA3Cf,SAAgBC,GAAQ,IAAD,EACOC,oBAAS,GADhB,mBACdC,EADc,KACNC,EADM,KAWfC,EAAU,CAAEC,KAAM,UAAWC,MAAO,OAAQC,IAAK,UAAWC,SAAU,OAsB5E,OACE,wBAAIC,UAAU,kBAAkBC,aA3BR,WACxBP,GAAU,KA2BR,wBAAIM,UArBHT,EAAMW,MAAMC,OAAS,EACf,kBACEZ,EAAMW,MAAMC,OAAS,EACtB,kBACCZ,EAAMW,MAAMC,OAAS,GACvB,mBAEF,iBAc8BC,aAhCb,WACxBV,GAAU,KA+BR,IAAwEH,EAAMM,OAC9E,wBAAIG,UAAYP,EAAS,GAAK,gBAXzBF,EAAMW,MAAMG,KAAK,SAACC,EAAMC,GAAP,OACtB,wBAAIP,UAAU,iBAAiBQ,IAAMF,EAAKG,IACxC,8BAAM,8BAAOF,EAAQ,GAArB,IAAgCD,EAAKI,UAArC,IAAiDJ,EAAKK,UACtD,8BAAO,IAAIC,KAAKN,EAAKO,KAAKC,mBAAmB,QAASnB,WCJ/CoB,MAvBf,SAAiBxB,GACf,IAAMyB,EAASC,mBAAQ,WACrB,IACMtB,EAAU,CAAEuB,QAAS,OAAQtB,KAAM,UAAWC,MAAO,OAAQC,IAAK,UAAWC,SAAU,OAE7F,MAHoB,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAGhHM,KAAI,SAACR,EAAOU,GAC7B,IAAMY,EAAgB5B,EAAM6B,SAASC,QAAO,SAAAC,GAAK,OAAK,IAAIV,KAAKU,EAAMT,KAAKC,mBAAmB,QAASnB,GAAU4B,SAAS1B,MAEzH,OAAS,kBAAC,EAAD,CAAOW,IAAOD,EAAOL,MAASiB,EAAetB,MAASA,SAGjE,CAACN,EAAM6B,WAET,OACA,6BACE,wCACA,4BACIJ,K,MCEOQ,MAlBf,WAAgB,IAAD,EACqBhC,mBAAS,IAD9B,mBACNiC,EADM,KACKC,EADL,KAWb,OARAC,qBAAU,WACRC,MAAM,kEACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJN,EAAaM,QAEd,IAGD,yBAAKhC,UAAU,aACb,kBAAC,EAAD,CAAQoB,SAAYK,MCLNQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d4d15998.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Month (props) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const mouseEnterHandler = () => {\r\n    setIsOpen(true)\r\n  }\r\n\r\n  const mouseLeaveHandler = () => {\r\n    setIsOpen(false)\r\n  }\r\n\r\n  const options = { year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC' }\r\n\r\n  const setBorderColor = () => {\r\n    if(props.users.length < 3) {\r\n      return \"month-item-grey\"\r\n    } else if (props.users.length < 7) {\r\n      return  \"month-item-blue\"\r\n    } else if (props.users.length < 11) {\r\n      return \"month-item-green\"\r\n    } \r\n    return \"month-item-red\"\r\n  }\r\n\r\n  const makeUserList = () => {\r\n    return props.users.map( (user, index) => (\r\n      <li className=\"user-list-item\" key= {user.id}>\r\n        <span><span>{index + 1}</span> {user.firstName} {user.lastName}</span>\r\n        <span>{new Date(user.dob).toLocaleDateString(\"en-EN\", options)}</span>\r\n      </li>\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <li className=\"month-list-item\" onMouseLeave= {mouseLeaveHandler}>\r\n      <h4 className = {setBorderColor()} onMouseEnter = {mouseEnterHandler}> {props.month}</h4>\r\n      <ol className= {isOpen ? '' : 'display-none'}>\r\n        {makeUserList()}\r\n      </ol>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Month;","import React, { useMemo } from 'react';\r\nimport Month from './Month'\r\n\r\nfunction Months (props) {\r\n  const months = useMemo(() => {\r\n    const monthsNames = ['January', \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC' }\r\n  \r\n    return monthsNames.map((month, index) => {\r\n      const filteredUsers = props.userData.filter(human => (new Date(human.dob).toLocaleDateString('en-US', options)).includes(month))\r\n    \r\n      return  (<Month key = {index} users = {filteredUsers} month = {month}/>)\r\n    })\r\n  }\r\n  , [props.userData]) \r\n\r\n  return (\r\n  <div>\r\n    <h1>Months: </h1>\r\n    <ul>\r\n      { months }\r\n    </ul>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Months;","import React, { useEffect, useState } from 'react';\nimport Months from './components/Months'\nimport './App.css';\n\nfunction App() {\n  const [usersData, setUsersData] = useState([])\n\n  useEffect(() => {\n    fetch(`https://yalantis-react-school-api.yalantis.com/api/task0/users`)\n    .then(response => response.json())\n    .then(data => {\n      setUsersData(data);\n    })\n  }, [])\n\n  return (\n    <div className=\"container\">\n      <Months userData = {usersData} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}